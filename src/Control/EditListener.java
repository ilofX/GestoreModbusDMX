/*
 * Copyright 2017 Filippo Stella.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Control;

import Model.GestioneLuci;
import View.Modifica.FrameModifica;
import View.Modifica.PannelloModifica;
import View.PannelloLuci;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author Filippo Stella
 * @version 1.0
 */
public class EditListener implements ActionListener{
    
    private final PannelloLuci pl;
    private final GestioneLuci gl;
    private final FrameModifica fm;
    private final PannelloModifica pm;

    /**
    * Contructor for the Edit listener
    * <p>
    * This method is the constructor for the edit listener
    * this listener controls the buttons wich with you can edit
    * a light
    * 
    * @param pl         The PannelloLuci, where all the inserted lights are displayed
    * @param gl         The GestioneLuci class the class that manage the lights
    * @param fm         The FrameModifica the frame wich contains a panel wich with you can modidy the proprieties of a light
    */
    public EditListener(PannelloLuci pl, GestioneLuci gl, FrameModifica fm) {
        this.pl = pl;
        this.gl = gl;
        this.fm = fm;
        this.pm = ((PannelloModifica)fm.getContentPane());
        this.pl.setEl(this);
    }
    
    /**
    * This method adds this listener to the edit buttons
    * <p>
    * This method is called everytime there is a modification
    * in the stored lights. The listener addition is not called
    * in the constructor because it must be called everytime a variation
    * in the arraylist of lights is detected
    */
    public void addListener(){
        this.pl.listenerEdit(this);
    }
    
    
    /**
    * This method defines the behavior of the edit buttons
    * <p>
    * This method defines the behavior of each edit button
    * once a button is pressed it opens a frame wich with
    * you can edit the light proprieties
    * 
    * @param ae This is the event generated by the pression of an edit button
    */
    @Override
    public void actionPerformed(ActionEvent ae) {
        boolean flag=false;
        for(int i=0;i<this.pl.getSizeOfButton();i++){
            if(ae.getSource()==this.pl.getEdit(i)){
                flag=true;
                pm.initializeComponent(i, this.gl.getLuce(i));
                this.fm.setVisible(flag);
            }
        }
        if (flag==false){
            throw new UnsupportedOperationException("Not supported yet.");
        }  
    }
    
}
