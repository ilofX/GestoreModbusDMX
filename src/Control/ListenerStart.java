/*
 * Copyright 2017 Filippo Stella.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Control;

import View.Aggiunta.PannelloAggiunta;
import View.Modifica.PannelloModifica;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Filippo Stella
 * @version 1.0
 */
public class ListenerStart implements ChangeListener {
    
    private final PannelloAggiunta pa;
    private final PannelloModifica pm;

    /**
    * Contructor for the Listener Start
    * <p>
    * This method is the constructor for the Start listener
    * it set the values for the RGB channels in the case of
    * known lights
    * 
    * @param pa     The PannelloAggiunta the panel contained in the frame with wich you can add a new light
    * @param pm     The PannelloModifica the panel contained in the frame with wich you cab edit an already added light
    */
    public ListenerStart(PannelloAggiunta pa, PannelloModifica pm) {
        this.pa = pa;
        this.pm = pm;
        this.pa.listenerStart(this);
        this.pm.listenerStart(this);
    }

    /**
    * This method defines the behavior of the start JSpinner
    * <p>
    * This method defines the behavior of each start Jspinner.
    * Every time the state of a start JSpinner is changed it 
    * calculates the RGB channel adress in case of a known type of light.
    *
    * @param ce This is the event generated by the chane of the state of the start channel JSpinner
    */
    @Override
    public void stateChanged(ChangeEvent ce) {
        if(ce.getSource()==this.pa.getS_start()){
            if(((String)this.pa.getCb_tipo().getSelectedItem()).compareTo("RGB")==0){
                this.pa.getS_canaleR().setValue(this.pa.getS_start().getValue());
                this.pa.getS_canaleG().setValue(((Integer)this.pa.getS_start().getValue())+1);
                this.pa.getS_canaleB().setValue(((Integer)this.pa.getS_start().getValue())+2);
            }
            else if(((String)this.pa.getCb_tipo().getSelectedItem()).compareTo("Karma DJ359LED")==0){
                this.pa.getS_canaleR().setValue(((Integer)this.pa.getS_start().getValue())+1);
                this.pa.getS_canaleG().setValue(((Integer)this.pa.getS_start().getValue())+2);
                this.pa.getS_canaleB().setValue(((Integer)this.pa.getS_start().getValue())+3);
            
            }
        }
        else if(ce.getSource()==this.pm.getS_start()){
            if(((String)this.pm.getCb_tipo().getSelectedItem()).compareTo("RGB")==0){
                this.pm.getS_canaleR().setValue(this.pm.getS_start().getValue());
                this.pm.getS_canaleG().setValue(((Integer)this.pm.getS_start().getValue())+1);
                this.pm.getS_canaleB().setValue(((Integer)this.pm.getS_start().getValue())+2);
            }
            else if(((String)this.pm.getCb_tipo().getSelectedItem()).compareTo("Karma DJ359LED")==0){
                this.pm.getS_canaleR().setValue(((Integer)this.pm.getS_start().getValue())+1);
                this.pm.getS_canaleG().setValue(((Integer)this.pm.getS_start().getValue())+2);
                this.pm.getS_canaleB().setValue(((Integer)this.pm.getS_start().getValue())+3);
            }
        }
        else{
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

}
