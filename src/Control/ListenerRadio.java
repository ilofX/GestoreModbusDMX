/*
 * Copyright 2017 Filippo Stella.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Control;

import Model.GestioneLuci;
import View.MainPannello;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author Filippo Stella
 * @version 1.0
 */
public class ListenerRadio implements ActionListener{
    
    private final MainPannello mp;
    private final GestioneLuci gl;

    /**
    * Contructor for the Listener Radio
    * <p>
    * This method is the constructor for the edit listener
    * this listener controls the buttons wich with you can edit
    * a light
    * 
    * @param mp         The MainPannello frame, this is the main interface of the program
    * @param gl         The GestioneLuci class the class that manage the lights
    */
    public ListenerRadio(MainPannello mp, GestioneLuci gl) {
        this.mp = mp;
        this.gl = gl;
        this.mp.listenerRadio(this);
    }
    
    /**
    * This method defines the behavior of the Radio buttons
    * <p>
    * This method defines the behavior of each radio button
    * once a button is pressed it sets the RGB slider and
    * the delay textArea enabled or disabled depending by the cases
    * 
    * @param e This is the event generated by the pression of a radio button
    */
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()==this.mp.getR_solid()){
            if(this.mp.getR_solid().isSelected()){
                this.mp.getSl_r().setEnabled(true);
                this.mp.getSl_g().setEnabled(true);
                this.mp.getSl_b().setEnabled(true);
                this.mp.getSp_time().setEnabled(false);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_rainbow()){
            if(this.mp.getR_rainbow().isSelected()){
                this.mp.getSl_r().setEnabled(false);
                this.mp.getSl_g().setEnabled(false);
                this.mp.getSl_b().setEnabled(false);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }    
        }
        else if(e.getSource()==this.mp.getR_random()){
            if(this.mp.getR_random().isSelected()){
                this.mp.getSl_r().setEnabled(false);
                this.mp.getSl_g().setEnabled(false);
                this.mp.getSl_b().setEnabled(false);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }  
        }
        else if(e.getSource()==this.mp.getR_jump()){
            if(this.mp.getR_jump().isSelected()){
                this.mp.getSl_r().setEnabled(true);
                this.mp.getSl_g().setEnabled(true);
                this.mp.getSl_b().setEnabled(true);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_rotate()){
            if(this.mp.getR_rotate().isSelected()){
                this.mp.getSl_r().setEnabled(true);
                this.mp.getSl_g().setEnabled(true);
                this.mp.getSl_b().setEnabled(true);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_sfuma()){
            if(this.mp.getR_sfuma().isSelected()){
                this.mp.getSl_r().setEnabled(false);
                this.mp.getSl_g().setEnabled(false);
                this.mp.getSl_b().setEnabled(false);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_jumpRainbow()){
            if(this.mp.getR_jumpRainbow().isSelected()){
                this.mp.getSl_r().setEnabled(false);
                this.mp.getSl_g().setEnabled(false);
                this.mp.getSl_b().setEnabled(false);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_kit()){
            if(this.mp.getR_kit().isSelected()){
                this.mp.getSl_r().setEnabled(false);
                this.mp.getSl_g().setEnabled(false);
                this.mp.getSl_b().setEnabled(false);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
            }
        }
        else if(e.getSource()==this.mp.getR_auto()){
                this.mp.getSl_r().setEnabled(true);
                this.mp.getSl_g().setEnabled(true);
                this.mp.getSl_b().setEnabled(true);
                this.mp.getSp_time().setEnabled(true);
                this.mp.getB_applica().setEnabled(true);
        }
        else{
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }
    
}
